#+TITLE: Introduction To Circuit Complexity
#+AUTHOR: Heribert Vollmer

#+EXPORT_FILE_NAME: ../latex/IntroductionToCircuitComplexity/IntroductionToCircuitComplexity.tex
#+LATEX_HEADER: \def \val {\text{val}}
* Complexity Measures and Reductions
** Circuit Size and Depth
   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   A *Boolean function* is a function \(f:\{0,1\}^m\to\{0,1\}\) for some \(m\in\N\)
   #+END_definition

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   A *family of Boolean functions* is a sequence \(f=(f^n)_{n\in\N}\), where \(f^n\) is an \(n\)-ary
   Boolean function
   #+END_definition

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   A *basis* is a finite set consisting of Boolean functions and families of Boolean functions
   #+END_definition

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   Let \(B\) be a basis. A *Boolean circuit* over \(B\) with \(n\) inputs and \(m\) outputs is a
   tuple
   \begin{equation*}
C=(V,E,\alpha,\beta,\omega)
   \end{equation*}
   where \((V,E)\) is a finite directed acyclic graph, \(\alpha:E\to\N\) is an injective function,
   \(\beta:V\to B\cup\{x_1,\dots,x_n\}\) and \(\omega:V\to\{y_1,\dots,y_m\}\cup\{*\}\) s.t. the following
   conditions holds:
   1. If \(v\in V\) has in-degree 0, then \(\beta(v)\in\{x_1,\dots,x_n\}\) or \(\beta(v)\) is a 0-ary
      Boolean function from \(B\)
   2. If \(v\in V\) has in-degree \(k>0\), then \(\beta(v)\) is a \(k\)-ary Boolean function from \(B\)
      or a family of Boolean functions from \(B\)
   3. For every \(i\), \(1\le i\le n\), there is at most one node \(v\in V\) s.t. \(\beta(v)=x_i\)
   4. For every \(i\), \(1\le i\le m\), there is exactly one node \(v\in V\) s.t. \(w(v)=y_i\)


   If \(v\in V\) has in-degree \(k_0\) and out-degree \(k_1\), then we say: \(v\) is a *gate*
   in \(C\) with *fan-in* \(k_0\) and *fan-out* \(k_1\). If \(v\) is a gate in \(C\) then we also
   write \(v\in C\) instead of \(v\in V\). If \(e=(u,v)\in E\) then we say: \(e\) is a *wire*
   in \(C\) and that \(u\) is a *predecessor gate* of \(v\). If \(\beta(v)=x_i\) for some \(i\)
   then \(v\) is an *input gate* or *input node*. If \(\omega(v)\neq*\) then \(v\) is an *output gate* or
   *output node*
   #+END_definition

   \beta function gives the *type* of a gate \(v\). The \omega function designates certain nodes as output
   nodes. If \(\omega(v)=*\) then \(v\) is not an output node.

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   Let \(C=(V,E,\alpha,\beta,\omega)\) be a circuit over \(B\) with \(n\) inputs and \(m\) outputs. First we
   define inductively for every \(v\in V\)a function \(\val_v:\{0,1\}^n\to\{0,1\}\) as follows.
   Let \(a_1,\dots,a_n\) be arbitrary binary values
   1. If \(v\in V\) has fan-in 0 and if \(\beta(v)=x_i\) for some \(1\le i\le n\),
      then \(\val_v(a_1,\dots,a_n):=a_i\). If \(v\in V\) has fan-in 0 and if \(\beta(v)=b\) is a 0-ary
      function from \(B\), then \(\val_v(a_1,\dots,a_n):=b\)
   #+END_definition





